################################################################
#
# SEPTEMBER MODULE: runtime
#
# A module that is automatically loaded by the September
# interpreter at startup before handing control over to actual
# September code. Defines basic stuff like loops, control flow
# constructs, and prototypes for primitives (Integer, String,
# etc).
#
################################################################

### Additional object operators (defined based on the native ones)

Object:::"!=" = |other| { !(this == other) }

### Object methods

Object:::resolveAsLiteral = {
	this.resolve(scope: LiteralScope)
}

### Array and object 'literals'

syntax::"[]" = |...___arrayElements| { ___arrayElements }
syntax::"[[]]" = |:::___objectProperties| { ___objectProperties }

### 'class' statement and its components

ClassDefinition := Object()

ClassDefinition:::field = |?name| {
	name = name.resolveAsLiteral()
	cls.accept(name, Slot.field())
}

ClassDefinition:::method = |?name, function = Nothing| {
	name = name.resolveAsLiteral()
	cls.accept(name, Slot.method(function))
}

ClassDefinition:::constructor = |function| {
	cls.accept("<constructor>", Slot.method(function))
}

class := |?name, definition| {
	callingScope := Scopes.caller()
	name = name.resolveAsLiteral()
	
	# create the class
	cls := Class.new(name)
	
	# execute the definition block in the right environment	
	definitionScope := Object()
	definitionScope.prototypes = [ClassDefinition, callingScope]
	definitionScope::cls = cls
	definition.invoke(scope: definitionScope)
	
	# add the class to our caller's scope so that the 
	# statement "class A {...}" actually defines 'A'
	export(cls, as: name)

	return cls
}

#########################################################
# Comparable mixin
#########################################################

## Exception thrown when uncomparable objects are compared with <, >, <= or >=.
class EUncomparable {
	constructor {
		this::message = "These values are not comparable."
	}
}
EUncomparable.prototypes = Exception

comparisonLogic := |relation| {
	return: |other| {
		comparison := this."<compareTo>"(other)
		if (comparison === UncomparableValues) { 
			throw: EUncomparable() 
		}
		return: relation(comparison)
	}
}

## The mixin itself.
class Comparable {
	field UncomparableValues = Nothing
	
 	method "==" |other| { this."<compareTo>"(other) == 0 }
 	method "!=" |other| { this."<compareTo>"(other) != 0 }
 	
 	method "<"  = comparisonLogic |c|{ c < 0 } 
 	method ">"  = comparisonLogic |c|{ c > 0 }
 	method "<=" = comparisonLogic |c|{ c <= 0 }
 	method ">=" = comparisonLogic |c|{ c >= 0 }
}

#########################################################
# Strings
#########################################################

String:::join = |sequence| {
	joined := ""
	first := True
	for (item) in (sequence) {
		if (!first) { joined = joined + this } else { first = False }
		joined = joined + item.toString()		
	}
	return: joined
}
String:::toString = { this }

#########################################################
# Iterables and iterable operations
#########################################################

class Iterable {
	method map |mapping| { DerivedIterable(mappingIteration(mapping), this) }
	method filter |filter| { DerivedIterable(filteringIteration(filter), this) }
	method realize { this }
	method toString { ", ".join(this) }
}

class DerivedIterable {
	constructor |iterFunc, baseIterable| {
		this::iterFunc = iterFunc
		this::baseIterable = baseIterable
	}
	
	method iterator { FuncIterator(iterFunc, baseIterable.iterator()) }
	method realize { baseIterable.fromIterator(this.iterator()) }
	method fromIterator |it| { baseIterable.fromIterator(it) }
}
DerivedIterable.prototypes = Iterable

class FuncIterator {
	constructor |func, iterator| {
		this::iterFunc = func
		this::baseNext = iterator.next
	}
	
	method next { iterFunc(baseNext) }
}

mappingIteration := |mapping| {
	return: |next| {
		element := next()
		mapping(element)
	}
}
filteringIteration := |filter| {
	return: |next| {
		element := next()
		while (!filter(element)) { element = next() }
		element
	}
}

#########################################################
# Sequences
#########################################################

class EOutOfBounds {
	constructor |index| {
		this::message = "Index '" + index.toString() + "' is out of bounds."
	}
}
EOutOfBounds.prototypes = Exception


class Sequence {
	method "[]" |?index| {
		index = index.resolve(extensions: [[ end: -1 ]])
		if (index.is(Integer)) {
			index = this.normalizeIndex(index)
			this.at(index)
		} else {		
			normalized := this.normalizeIndexSequence(index)
			this.view(normalized)
		}
		
#		if ((indices.length() == 1) && (indices[0].is(Integer))) {
#			// simple indexing
#			index := normalizeIndex(indices[0])
#			this.at(index)
#		} else {
#			normalized := indices.map(this.normalizeIndexSequence)
#			this.view(Sequence.concatenated(sequences: normalized))
#		}
	}
	
	method view |indexSequence| { SequenceView(this, indexSequence) }	
	method normalizeIndexSequence |seq| {
		# TODO: Once is() is improved, fix the first step to 'not a sequence'
		if (seq.is(Integer)) {
			[seq]
		} elseif (seq.is(Range)) {
			this.normalizeIndexRange(seq)
		} else {
			seq # later - filter()
		}
	}
	
	method normalizeIndexRange |range| {
		len := this.length()
		
		start := this.normalizeIndex(range.start)
		if (start < 0) { start = 0 }
		if (start >= len) { start = len }
		
		end := this.normalizeIndex(range.end)
		if (!range.openEnded) { end = end + 1 }
		if (end < 0) { end = 0 }
		if (end >= len) { end = len }
		
		Range(start, end, True)
	}
	
	method normalizeIndex |index| {
		if (index < 0) { this.length() + index } else { index }
	}
	
	method sum {
		total := 0
		for (item) in (this) { total = total + item }
		return: total
	}
	
	method concatenated |...sequences| { Concatenation(sequences) }
	method iterator { SequenceIterator(this) }
}
Sequence.prototypes = Iterable

class SequenceIterator {
	constructor |sequence| {
		this::sequence = sequence
		this::current = 0
		this::length = sequence.length()
	}
	
	method next {
		if (current >= length) { throw: ENoMoreElements() }
		value := sequence.at(current)
		current = current + 1
		return: value
	}
}

#########################################################
# Sequence.concatenated
#########################################################

class Concatenation {
	constructor |sequences| {
		this::seqs = sequences
		this::_length = sequences.map|x|{ x.length() }.sum()
	}
	
	method at |index| {
		if ((index < 0) || (index >= _length)) {
			throw: EOutOfBounds()
		}
		for (seq) in (seqs) {
			if (index < seq.length()) {
				break
			} else {
				index = index - seq.length()
			}
		}
		seq[index]
	}
	method length { _length }	
}
Concatenation.prototypes = Sequence

#########################################################
# Ranges
#########################################################

class Range {
	constructor |start, end, openEnded = False| {
		this::start = start
		this::end = end
		this::openEnded = openEnded
		
		this::_length = end - start + (if (openEnded) {0} else {1})
		if (_length < 0) { _length = 0 }
	}
	
	method contains |value| {
		max := if (openEnded) { end - 1 } else { end }
		return: (index < start) || (index > max) 
	}
	
	method at |index| {
		if ((index < 0) || (index >= _length)) { throw: EOutOfBounds() } 		
		return: start + index
	}		
	method iterator { RangeIterator(this) }
	method length { _length }	
}
Range.prototypes = Sequence

class RangeIterator {
	constructor |range| {
		this::range = range
		this::current = range.start
	}
	
	method next {
		range_end := if (range.openEnded) { range.end - 1 } else { range.end }
		if (current > range_end) {
			throw: ENoMoreElements()
		} else {
			return_value := current
			current = current + 1
			return: return_value
		}			
	}
}

Integer:::".."  = |end| { Range(this, end) }
Integer:::"..." = |end| { Range(this, end, True) }

#########################################################
# Slices
#########################################################

class SequenceView {
	constructor |base, indexSequence| {
		this::base = base
		this::indexSequence = indexSequence				
	}
	
	method at |index| {
		if ((index < 0) || (index >= this.length())) {
			throw: EOutOfBounds()
		}
		base[ indexSequence[index] ]		
	}		
	method length { indexSequence.length() }
}
SequenceView.prototypes = Sequence

#########################################################
# Updated prototypes for primitives
#########################################################

String.prototypes = [Comparable, Sequence]
Array.prototypes = Sequence
